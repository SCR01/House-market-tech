{"ast":null,"code":"// Trie Data Structure Implementation for Efficient String Search\nclass TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndOfWord = false;\n    this.userData = null; // To store the user data associated with this word\n  }\n}\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  /**\n   * Insert a word into the trie with associated user data\n   * @param {string} word - The word to insert\n   * @param {object} userData - Associated user data\n   */\n  insert(word, userData) {\n    if (!word) return;\n    word = word.toLowerCase();\n    let current = this.root;\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!current.children[char]) {\n        current.children[char] = new TrieNode();\n      }\n      current = current.children[char];\n    }\n    current.isEndOfWord = true;\n    current.userData = userData;\n  }\n\n  /**\n   * Search for all words in the trie that start with the given prefix\n   * @param {string} prefix - The prefix to search for\n   * @return {Array} - Array of user data objects for matching words\n   */\n  searchPrefix(prefix) {\n    if (!prefix) return [];\n    prefix = prefix.toLowerCase();\n    let current = this.root;\n\n    // Navigate to the end of the prefix in the trie\n    for (let i = 0; i < prefix.length; i++) {\n      const char = prefix[i];\n      if (!current.children[char]) {\n        return []; // Prefix not found\n      }\n      current = current.children[char];\n    }\n\n    // Collect all words with this prefix\n    const results = [];\n    this._collectWords(current, results);\n    return results;\n  }\n\n  /**\n   * Helper method to collect all words from a given node\n   * @param {TrieNode} node - The node to start collection from\n   * @param {Array} results - Array to store results\n   */\n  _collectWords(node, results) {\n    if (node.isEndOfWord) {\n      results.push(node.userData);\n    }\n    for (const char in node.children) {\n      this._collectWords(node.children[char], results);\n    }\n  }\n}\nexport default Trie;","map":{"version":3,"names":["TrieNode","constructor","children","isEndOfWord","userData","Trie","root","insert","word","toLowerCase","current","i","length","char","searchPrefix","prefix","results","_collectWords","node","push"],"sources":["C:/Users/scr/OneDrive/Desktop/House market tech/house-market-landing/src/utils/Trie.js"],"sourcesContent":["// Trie Data Structure Implementation for Efficient String Search\nclass TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndOfWord = false;\n    this.userData = null; // To store the user data associated with this word\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  /**\n   * Insert a word into the trie with associated user data\n   * @param {string} word - The word to insert\n   * @param {object} userData - Associated user data\n   */\n  insert(word, userData) {\n    if (!word) return;\n    \n    word = word.toLowerCase();\n    let current = this.root;\n    \n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!current.children[char]) {\n        current.children[char] = new TrieNode();\n      }\n      current = current.children[char];\n    }\n    \n    current.isEndOfWord = true;\n    current.userData = userData;\n  }\n\n  /**\n   * Search for all words in the trie that start with the given prefix\n   * @param {string} prefix - The prefix to search for\n   * @return {Array} - Array of user data objects for matching words\n   */\n  searchPrefix(prefix) {\n    if (!prefix) return [];\n    \n    prefix = prefix.toLowerCase();\n    let current = this.root;\n    \n    // Navigate to the end of the prefix in the trie\n    for (let i = 0; i < prefix.length; i++) {\n      const char = prefix[i];\n      if (!current.children[char]) {\n        return []; // Prefix not found\n      }\n      current = current.children[char];\n    }\n    \n    // Collect all words with this prefix\n    const results = [];\n    this._collectWords(current, results);\n    return results;\n  }\n\n  /**\n   * Helper method to collect all words from a given node\n   * @param {TrieNode} node - The node to start collection from\n   * @param {Array} results - Array to store results\n   */\n  _collectWords(node, results) {\n    if (node.isEndOfWord) {\n      results.push(node.userData);\n    }\n    \n    for (const char in node.children) {\n      this._collectWords(node.children[char], results);\n    }\n  }\n}\n\nexport default Trie;\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,CAAC;EACbC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAAC,CAAC;EACxB;AACF;AAEA,MAAMC,IAAI,CAAC;EACTJ,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACK,IAAI,GAAG,IAAIN,QAAQ,CAAC,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;EACEO,MAAMA,CAACC,IAAI,EAAEJ,QAAQ,EAAE;IACrB,IAAI,CAACI,IAAI,EAAE;IAEXA,IAAI,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC;IACzB,IAAIC,OAAO,GAAG,IAAI,CAACJ,IAAI;IAEvB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,MAAME,IAAI,GAAGL,IAAI,CAACG,CAAC,CAAC;MACpB,IAAI,CAACD,OAAO,CAACR,QAAQ,CAACW,IAAI,CAAC,EAAE;QAC3BH,OAAO,CAACR,QAAQ,CAACW,IAAI,CAAC,GAAG,IAAIb,QAAQ,CAAC,CAAC;MACzC;MACAU,OAAO,GAAGA,OAAO,CAACR,QAAQ,CAACW,IAAI,CAAC;IAClC;IAEAH,OAAO,CAACP,WAAW,GAAG,IAAI;IAC1BO,OAAO,CAACN,QAAQ,GAAGA,QAAQ;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEU,YAAYA,CAACC,MAAM,EAAE;IACnB,IAAI,CAACA,MAAM,EAAE,OAAO,EAAE;IAEtBA,MAAM,GAAGA,MAAM,CAACN,WAAW,CAAC,CAAC;IAC7B,IAAIC,OAAO,GAAG,IAAI,CAACJ,IAAI;;IAEvB;IACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,MAAM,CAACH,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,IAAI,GAAGE,MAAM,CAACJ,CAAC,CAAC;MACtB,IAAI,CAACD,OAAO,CAACR,QAAQ,CAACW,IAAI,CAAC,EAAE;QAC3B,OAAO,EAAE,CAAC,CAAC;MACb;MACAH,OAAO,GAAGA,OAAO,CAACR,QAAQ,CAACW,IAAI,CAAC;IAClC;;IAEA;IACA,MAAMG,OAAO,GAAG,EAAE;IAClB,IAAI,CAACC,aAAa,CAACP,OAAO,EAAEM,OAAO,CAAC;IACpC,OAAOA,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACEC,aAAaA,CAACC,IAAI,EAAEF,OAAO,EAAE;IAC3B,IAAIE,IAAI,CAACf,WAAW,EAAE;MACpBa,OAAO,CAACG,IAAI,CAACD,IAAI,CAACd,QAAQ,CAAC;IAC7B;IAEA,KAAK,MAAMS,IAAI,IAAIK,IAAI,CAAChB,QAAQ,EAAE;MAChC,IAAI,CAACe,aAAa,CAACC,IAAI,CAAChB,QAAQ,CAACW,IAAI,CAAC,EAAEG,OAAO,CAAC;IAClD;EACF;AACF;AAEA,eAAeX,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}