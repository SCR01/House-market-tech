{"version":3,"file":"static/js/357.e9e4ee61.chunk.js","mappings":"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","sources":["utils/useDebounce.js","utils/Trie.js","components/UserSearch/UserSearch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n// Custom hook for debouncing values\nconst useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    // Set a timeout to update debounced value after delay\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes or component unmounts\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default useDebounce;\n","// Trie Data Structure Implementation for Efficient String Search\nclass TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndOfWord = false;\n    this.userData = null; // To store the user data associated with this word\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  /**\n   * Insert a word into the trie with associated user data\n   * @param {string} word - The word to insert\n   * @param {object} userData - Associated user data\n   */\n  insert(word, userData) {\n    if (!word) return;\n    \n    word = word.toLowerCase();\n    let current = this.root;\n    \n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      if (!current.children[char]) {\n        current.children[char] = new TrieNode();\n      }\n      current = current.children[char];\n    }\n    \n    current.isEndOfWord = true;\n    current.userData = userData;\n  }\n\n  /**\n   * Search for all words in the trie that start with the given prefix\n   * @param {string} prefix - The prefix to search for\n   * @return {Array} - Array of user data objects for matching words\n   */\n  searchPrefix(prefix) {\n    if (!prefix) return [];\n    \n    prefix = prefix.toLowerCase();\n    let current = this.root;\n    \n    // Navigate to the end of the prefix in the trie\n    for (let i = 0; i < prefix.length; i++) {\n      const char = prefix[i];\n      if (!current.children[char]) {\n        return []; // Prefix not found\n      }\n      current = current.children[char];\n    }\n    \n    // Collect all words with this prefix\n    const results = [];\n    this._collectWords(current, results);\n    return results;\n  }\n\n  /**\n   * Helper method to collect all words from a given node\n   * @param {TrieNode} node - The node to start collection from\n   * @param {Array} results - Array to store results\n   */\n  _collectWords(node, results) {\n    if (node.isEndOfWord) {\n      results.push(node.userData);\n    }\n    \n    for (const char in node.children) {\n      this._collectWords(node.children[char], results);\n    }\n  }\n}\n\nexport default Trie;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport useDebounce from '../../utils/useDebounce';\nimport Trie from '../../utils/Trie';\nimport './UserSearch.css';\n\nconst UserSearch = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [users, setUsers] = useState([]);\n  const [filteredUsers, setFilteredUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const debouncedSearchTerm = useDebounce(searchTerm, 300); // Debounce search input by 300ms\n  const trieRef = useRef(null);\n\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    threshold: 0.1,\n  });\n\n  // Fetch users from API\n  useEffect(() => {\n    const fetchUsers = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n        if (!response.ok) {\n          throw new Error('Failed to fetch users');\n        }\n        const data = await response.json();\n        setUsers(data);\n        setFilteredUsers(data);\n        \n        // Initialize Trie for efficient search\n        const trie = new Trie();\n        data.forEach(user => {\n          trie.insert(user.name, user);\n          trie.insert(user.username, user);\n          trie.insert(user.email, user);\n        });\n        trieRef.current = trie;\n        \n      } catch (err) {\n        setError(err.message);\n        console.error('Error fetching users:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  // Handle search with debounced input using Trie\n  useEffect(() => {\n    if (debouncedSearchTerm && trieRef.current) {\n      const results = trieRef.current.searchPrefix(debouncedSearchTerm);\n      \n      // Remove duplicates (since a user might match on multiple fields)\n      const uniqueResults = Array.from(\n        new Map(results.map(user => [user.id, user])).values()\n      );\n      \n      setFilteredUsers(uniqueResults);\n    } else {\n      setFilteredUsers(users);\n    }\n  }, [debouncedSearchTerm, users]);\n\n  return (\n    <section id=\"users\" className=\"user-search-section\">\n      <div className=\"container\">\n        <div className=\"section-header\">\n          <h2>Our Community Members</h2>\n          <p>Search and connect with our community of homeowners and property experts</p>\n        </div>\n\n        <div className=\"search-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Search users by name, username, or email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n          <div className=\"search-icon\">üîç</div>\n        </div>\n\n        {loading && <div className=\"loading-message\">Loading users...</div>}\n        {error && <div className=\"error-message\">Error: {error}</div>}\n\n        {!loading && !error && (\n          <div ref={ref} className={`users-grid ${inView ? 'fade-in' : ''}`}>\n            {filteredUsers.length > 0 ? (\n              filteredUsers.map(user => (\n                <div key={user.id} className=\"user-card\">\n                  <div className=\"user-avatar\">\n                    <img \n                      src={`https://ui-avatars.com/api/?name=${user.name}&background=random&color=fff`}\n                      alt={user.name}\n                      loading=\"lazy\" // Implement lazy loading for images\n                    />\n                  </div>\n                  <h3 className=\"user-name\">{user.name}</h3>\n                  <p className=\"user-username\">@{user.username}</p>\n                  <p className=\"user-email\">{user.email}</p>\n                  <div className=\"user-details\">\n                    <p><strong>Phone:</strong> {user.phone}</p>\n                    <p><strong>Website:</strong> {user.website}</p>\n                    <p><strong>Company:</strong> {user.company.name}</p>\n                  </div>\n                  <button className=\"user-contact-btn\">Contact</button>\n                </div>\n              ))\n            ) : (\n              <div className=\"no-results\">No users found matching \"{searchTerm}\"</div>\n            )}\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default UserSearch;\n"],"names":["useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","timer","setTimeout","clearTimeout","TrieNode","constructor","this","children","isEndOfWord","userData","root","insert","word","toLowerCase","current","i","length","char","searchPrefix","prefix","results","_collectWords","node","push","UserSearch","searchTerm","setSearchTerm","users","setUsers","filteredUsers","setFilteredUsers","loading","setLoading","error","setError","debouncedSearchTerm","trieRef","useRef","ref","inView","useInView","triggerOnce","threshold","async","response","fetch","ok","Error","data","json","trie","Trie","forEach","user","name","username","email","err","message","console","fetchUsers","uniqueResults","Array","from","Map","map","id","values","_jsx","className","_jsxs","type","placeholder","onChange","e","target","src","alt","phone","website","company"],"sourceRoot":""}